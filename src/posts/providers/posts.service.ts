import {
  BadRequestException,
  ConflictException,
  Injectable,
  RequestTimeoutException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Post } from '../post.entity';
import { Repository } from 'typeorm';
import { UsersService } from '../../users/providers/users.service';
import { CreatePostDto } from '../dtos/create-post.dto';
import { MetaOption } from '../../meta-options/meta-option.entity';
import { TagsService } from '../../tags/providers/tags.service';
import { PatchPostDto } from '../dtos/patch-post.dto';
import { Tag } from '../../tags/tag.entity';
import { GetPostDto } from '../dtos/get-post.dto';
import { PaginationProvider } from '../../common/pagination/providers/pagination.provider';
import { Paginated } from '../../common/pagination/interfaces/paginated.interface';
import { ActiveUserInterface } from '../../auth/interfaces/active-user.interface';
import { User } from '../../users/user.entity';

@Injectable()
export class PostsService {
  constructor(
    /*
     * Injecting Users Service
     */
    private readonly usersService: UsersService,

    /*
     * Injecting Tags Service
     */
    private readonly tagsService: TagsService,

    private readonly paginationProvider: PaginationProvider,

    /**
     * Injecting postsRepository
     */
    @InjectRepository(Post)
    private readonly postsRepository: Repository<Post>,

    @InjectRepository(MetaOption)
    private readonly metaOptionRepository: Repository<MetaOption>,
  ) {}

  public async createPost(
    createPostsDto: CreatePostDto,
    user: ActiveUserInterface,
  ) {
    // Khai b√°o bi·∫øn t√°c gi·∫£ v√† th·∫ª (tags)
    let author: User | undefined = undefined;
    let tags: Tag[] | undefined;

    try {
      // T√¨m ng∆∞·ªùi d√πng (t√°c gi·∫£) t·ª´ CSDL theo userId
      author = await this.usersService.findOneById(user.sub);

      // N·∫øu ng∆∞·ªùi d√πng g·ª≠i l√™n tags, ti·∫øn h√†nh t√¨m c√°c tag t∆∞∆°ng ·ª©ng
      tags = createPostsDto.tags
        ? await this.tagsService.findMultipleTags(createPostsDto.tags)
        : [];
    } catch (error) {
      // N·∫øu x·∫£y ra l·ªói trong qu√° tr√¨nh t√¨m t√°c gi·∫£ ho·∫∑c tags, n√©m ra l·ªói xung ƒë·ªôt
      throw new ConflictException('L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu t√°c gi·∫£ ho·∫∑c th·∫ª.');
    }

    // Ki·ªÉm tra xem t·∫•t c·∫£ tagId g·ª≠i l√™n c√≥ t·ªìn t·∫°i kh√¥ng
    if (createPostsDto?.tags?.length !== tags.length) {
      throw new BadRequestException(
        'Vui l√≤ng ki·ªÉm tra l·∫°i danh s√°ch tag b·∫°n ƒë√£ g·ª≠i.',
      );
    }

    // T·∫°o b√†i vi·∫øt m·ªõi
    const post = this.postsRepository.create({
      ...createPostsDto,
      author: author,
      tags: tags,
    });

    try {
      // L∆∞u b√†i vi·∫øt v√†o CSDL v√† tr·∫£ k·∫øt qu·∫£
      return await this.postsRepository.save(post);
    } catch (error) {
      // N·∫øu slug tr√πng l·∫∑p ho·∫∑c c√≥ l·ªói khi l∆∞u, n√©m ra l·ªói xung ƒë·ªôt
      throw new ConflictException(
        error,
        'L·ªói khi l∆∞u b√†i vi·∫øt. ƒê·∫£m b·∫£o r·∫±ng slug kh√¥ng b·ªã tr√πng.',
      );
    }
  }

  public async findAll(
    postQuery: GetPostDto,
    userId: string,
  ): Promise<Paginated<Post>> {
    const page = postQuery.page ?? 1;
    const limit = postQuery.limit ?? 10;
    // find all posts
    return await this.paginationProvider.paginateQuery(
      {
        limit,
        page,
      },
      this.postsRepository,
    );
  }

  public async updatePost(patchPostDto: PatchPostDto) {
    let tags: Tag[] | undefined;
    let post: Post | null;

    // üîé T√¨m c√°c tag theo ID
    try {
      tags = await this.tagsService.findMultipleTags(patchPostDto.tags ?? []);
    } catch (error) {
      throw new RequestTimeoutException(
        'Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n ngay l√∫c n√†y, vui l√≤ng th·ª≠ l·∫°i sau',
        {
          description: 'L·ªói k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu',
        },
      );
    }

    /**
     * ‚ùå N·∫øu kh√¥ng t√¨m th·∫•y ƒë·ªß tag
     * ‚Üí S·ªë l∆∞·ª£ng tag t√¨m ƒë∆∞·ª£c ph·∫£i b·∫±ng v·ªõi s·ªë l∆∞·ª£ng ID truy·ªÅn v√†o
     */
    if (!tags || tags.length !== patchPostDto.tags?.length) {
      throw new BadRequestException(
        'Vui l√≤ng ki·ªÉm tra l·∫°i c√°c tag ID, c√≥ th·ªÉ m·ªôt s·ªë ID kh√¥ng t·ªìn t·∫°i',
      );
    }

    // üîç T√¨m b√†i vi·∫øt c·∫ßn c·∫≠p nh·∫≠t
    try {
      post = await this.postsRepository.findOneBy({
        id: patchPostDto.id,
      });
    } catch (error) {
      throw new RequestTimeoutException(
        'Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n ngay l√∫c n√†y, vui l√≤ng th·ª≠ l·∫°i sau',
        {
          description: 'L·ªói k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu',
        },
      );
    }

    // ‚ùå N·∫øu kh√¥ng t√¨m th·∫•y b√†i vi·∫øt
    if (!post) {
      throw new BadRequestException('ID b√†i vi·∫øt kh√¥ng t·ªìn t·∫°i');
    }

    // ‚úèÔ∏è C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng c·ªßa b√†i vi·∫øt n·∫øu c√≥ d·ªØ li·ªáu m·ªõi
    post.title = patchPostDto.title ?? post.title;
    post.content = patchPostDto.content ?? post.content;
    post.status = patchPostDto.status ?? post.status;
    post.postType = patchPostDto.postType ?? post.postType;
    post.slug = patchPostDto.slug ?? post.slug;
    post.featuredImageUrl =
      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;
    post.publishOn = patchPostDto.publishOn ?? post.publishOn;

    // üîó G√°n l·∫°i danh s√°ch tag m·ªõi
    post.tags = tags;

    // üíæ L∆∞u b√†i vi·∫øt v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
    try {
      await this.postsRepository.save(post);
    } catch (error) {
      throw new RequestTimeoutException(
        'Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n ngay l√∫c n√†y, vui l√≤ng th·ª≠ l·∫°i sau',
        {
          description: 'L·ªói k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu',
        },
      );
    }

    return post;
  }

  public async deletePost(postId: string) {
    await this.postsRepository.delete({ id: postId });

    return { deleted: true, postId };
  }
}
